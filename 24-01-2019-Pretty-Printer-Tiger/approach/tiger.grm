%%

%eop EOF
%pure
%name Tiger


%term CONST of string
    | PLUS
    | MINUS
    | MUL
    | EOF
    | NEWLINE
    | IF
    | THEN
    | WHILE
    | DO
    | GT
    | LT 
    | EQ
    | EQ_LT
    | EQ_GT
    | TRUE
    | FALSE
    | SEMICOLON
    | LPARA
    | RPARA
    | ID of string
    | ASSIGN




(* The nonterminals of the language *)
%nonterm EXP     of Ast.Expr
        | EXPS    of Ast.program_string list
        | PROGRAM of Ast.program_string list
        | STATEMENT of Ast.program_string
        | CONDITION of Ast.condition
        | identifier of Ast.iden

%noshift EOF





%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL         (* higher than + and -            *)

(* The type that captures position in the input *)
%pos int

%%

PROGRAM : EXPS             ( EXPS )
	| EXPS NEWLINE         ( EXPS )

EXPS    :                  ( [] )
	| EXP SEMICOLON EXPS     ( Ast.expression_to_programString EXP :: EXPS   )  
    | STATEMENT  SEMICOLON EXPS          (STATEMENT :: EXPS)


CONDITION : EXP GT EXP       (Ast.greater EXP1 EXP2 )
            | EXP LT EXP      (Ast.lesser EXP1 EXP2)
            | EXP EQ EXP      (Ast.equal EXP1 EXP2)
            | EXP EQ_LT EXP    (Ast.equal_less EXP1 EXP2)
            | EXP EQ_GT EXP    (Ast.equal_greater EXP1 EXP2)
            | TRUE             (Ast.true_ ())
            | FALSE             (Ast.false_ ())
            | LPARA CONDITION RPARA  (Ast.brackets_condition CONDITION)

identifier : ID                 ( Ast.identify ID)

STATEMENT : IF CONDITION THEN STATEMENT     (Ast.if_then CONDITION STATEMENT    )
          | identifier ASSIGN EXP             (Ast.assign identifier EXP)
          | WHILE CONDITION DO STATEMENT     (Ast.while_do CONDITION STATEMENT )


EXP     : CONST                ( Ast.Const CONST     )
        | EXP PLUS EXP         ( Ast.plus  EXP1 EXP2 )
	    | EXP MINUS EXP        ( Ast.minus EXP1 EXP2 )
	    | EXP MUL   EXP        ( Ast.mul   EXP1 EXP2 )
        | LPARA EXP RPARA       (Ast.Brackets EXP)
