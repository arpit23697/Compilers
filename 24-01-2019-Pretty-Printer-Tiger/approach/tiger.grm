%%

%eop EOF
%pure
%name Tiger


%term CONST of string
    | PLUS
    | MINUS
    | MUL
    | EOF
    | NEWLINE
    | IF
    | THEN

(* The nonterminals of the language *)
%nonterm EXP     of Ast.Expr
       | EXPS    of Ast.program_string list
       | PROGRAM of Ast.program_string list
       | STATEMENT of Ast.program_string

%noshift EOF





%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL         (* higher than + and -            *)

(* The type that captures position in the input *)
%pos int

%%

PROGRAM : EXPS             ( EXPS )
	| EXPS NEWLINE         ( EXPS )

EXPS    :                  ( [] )
	| EXP NEWLINE EXPS     ( Ast.expression_to_programString EXP :: EXPS   )  
    | STATEMENT  NEWLINE EXPS          (STATEMENT :: EXPS)

STATEMENT : IF EXP THEN EXP     (Ast.if_then EXP1 EXP2)

EXP     : CONST                ( Ast.Const CONST     )
        | EXP PLUS EXP         ( Ast.plus  EXP1 EXP2 )
	    | EXP MINUS EXP        ( Ast.minus EXP1 EXP2 )
	    | EXP MUL   EXP        ( Ast.mul   EXP1 EXP2 )


