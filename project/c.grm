%%

%eop EOF
%pure
%name Tiger

(* This section is for the terminal of the language *)
%term RECORD
        | EOF
        | ID of string
        | LEFTBRACE 
        | RIGHTBRACE
        | COMMA
        | SEMICOLON
        | COLON
        | LEFTBRACKET
        | RIGHTBRACKET
        | STATIC
        | LPARA
        | RPARA
        | INT 
        | BOOL 
        | CHAR 
        | VOID
        | IF
        | ELSE
        | WHILE
        | FOR 
        | RETURN 
        | BREAK 
        | CONTINUE 
        | EQUAL
        | PLUSEQUAL
        | MINUSEQUAL
        | MULTEQUAL
        | DIVEQUAL
        | INC
        | DEC 
        | OR
        | AND 
        | NOT 
        | LESSEQUAL
        | LESS 
        | GREATER 
        | GREATEREQUAL 
        | EQUALEQUAL
        | NOTEQUAL
        | PLUS 
        | MINUS 
        | MULT 
        | DIV 
        | MOD 
        | QUES
        | DASH 
        | STAR
        | NUMCONST of string 
        | CHARCONST  of string 
        | TRUE 
        | FALSE
        | iff 
        | c 
        | COLONEQUAL


(* The nonterminals of the language *)
%nonterm program of Ast.program
        | declarationList of Ast.declaration list
        | declaration of  Ast.declaration 
        | varDeclaration of Ast.varDeclaration
        | varDeclList of Ast.varDeclInitialize list
        | varDeclInitialize of Ast.varDeclInitialize
        | varDeclID of Ast.varDeclID
        | typeSpecifier of Ast.typeSpecifier
        | funDeclaration of Ast.funDeclaration
        | params of Ast.paramType list
        | paramList of Ast.paramType list
        | paramType of Ast.paramType
        | paramID of Ast.paramID
        | statement of Ast.statement
        | compoundStmt of Ast.compoundStmt
        | localDeclarations of Ast.localDeclarations
        | statementList of Ast.statement list
        | expressionStmt of Ast.expressionStmt
        | selectionStmt of Ast.selectionStmt
        | iterationStmt of Ast.iterationStmt
        | returnStmt of Ast.returnStmt
        | breakStmt of Ast.breakStmt
        | continueStmt of Ast.continueStmt
        | expression of Ast.expression
        | simpleExpression of Ast.simpleExpression
        | andExpression of Ast.andExpression
        | unaryRelExpression of Ast.unaryRelExpression
        | relExpression of Ast.relExpression
        | sumExpression of Ast.sumExpression
        | term of Ast.term
        | unaryExpression of Ast.unaryExpression
        | factor of Ast.factor
        | mutable of Ast.mutable
        | immutable of Ast.immutable
        | call of Ast.call
        | argList of Ast.expression list
        | args of Ast.expression list
        | constant of Ast.constant
    



%noshift EOF
%verbose 

(* Precedence increase in the downward direction *)
%left OR 
%left AND 
%left NOT 
%left LESSEQUAL LESS GREATER GREATEREQUAL EQUALEQUAL NOTEQUAL 
%left PLUS MINUS 
%left MULT DIV MOD 
%left QUES DASH STAR
%nonassoc iff 
%nonassoc ELSE 
%nonassoc c
%nonassoc LPARA 



(* The type that captures position in the input *)
%pos int

(* Grammar of the language *)
%%

(* =============================== Grammar ================================*)
program : declarationList                                       ( Ast.declL(declarationList) )

declarationList : declarationList declaration                   ( declarationList @ [declaration] )
                | declaration                                   ( [declaration] )

declaration : varDeclaration                                    (Ast.variableDeclaration (varDeclaration) ) 
            | funDeclaration                                    (Ast.functionDeclaration (funDeclaration) )

(* ============================ variable declaration ===================== *)
varDeclaration : typeSpecifier varDeclList SEMICOLON                         (Ast.vDecl (typeSpecifier , varDeclList))

varDeclList : varDeclInitialize                                        ([varDeclInitialize])
              |   varDeclList COMMA varDeclInitialize                   ( varDeclList @ [varDeclInitialize] )
                                                 

varDeclInitialize : varDeclID                                       (Ast.declarationOnlyID (varDeclID) )
                | varDeclID COLONEQUAL simpleExpression                  (Ast.declarationAssignment (varDeclID , simpleExpression))

varDeclID : ID                                                     (Ast.vID (ID))
            | ID LEFTBRACKET NUMCONST RIGHTBRACKET                  (Ast.arrayLike (ID , NUMCONST))

typeSpecifier : INT                                           (Ast.integer)
                    | BOOL                                          (Ast.boolean)
                    | CHAR                                          (Ast.character)


(* ================================== function declaration =========================== *)
funDeclaration : typeSpecifier ID LPARA params RPARA compoundStmt       (Ast.functionReturn (typeSpecifier , ID , params , compoundStmt))  
                | VOID ID LPARA params RPARA compoundStmt              (Ast.functionVoid (ID , params , compoundStmt))

params :                                                         ([])
        | paramList                                              (paramList)

paramList : paramType                                              ([paramType])                                                            
        |paramList COMMA  paramType                         ( paramList @ [paramType] )

paramType : typeSpecifier paramID                           (Ast.parameter(typeSpecifier , paramID))

paramID : ID                                                        (Ast.normalID (ID))
        | ID LEFTBRACKET RIGHTBRACKET                               (Ast.arrayID (ID))

(* =============================== statements ==================================== *)
statement : expressionStmt                                          (Ast.eStatement (expressionStmt)) 
            | compoundStmt                                          (Ast.cStatement (compoundStmt))
            | selectionStmt                                         (Ast.sStatement (selectionStmt))
            | iterationStmt                                         (Ast.iStatement (iterationStmt))
            | returnStmt                                            (Ast.rStatement (returnStmt))
            | breakStmt                                             (Ast.bStatement (breakStmt))
            | continueStmt                                           (Ast.conStatement (continueStmt))
                
compoundStmt : LEFTBRACE localDeclarations statementList RIGHTBRACE   (Ast.statementWithBrace (localDeclarations , statementList))

localDeclarations : localDeclarations varDeclaration          (Ast.declIn (localDeclarations , varDeclaration) ) 
            |                                                       (Ast.emptyDeclIn)

statementList :                                                       ([] )
        | statementList statement                             (statementList @ [statement]) 
            

expressionStmt : expression SEMICOLON                               (Ast.basicExpression (expression))
             | SEMICOLON                                            (Ast.semicolon )

selectionStmt : IF LPARA simpleExpression RPARA statement       %prec iff   (Ast.IF (simpleExpression , statement))  
            | IF LPARA simpleExpression RPARA statement ELSE statement  (Ast.IF_ELSE (simpleExpression , statement1 , statement2))

iterationStmt : WHILE LPARA simpleExpression RPARA statement         (Ast.WHILE(simpleExpression , statement))
        
returnStmt : RETURN SEMICOLON                                        (Ast.returnNoValue)
            | RETURN expression SEMICOLON                           (Ast.returnValue (expression))

breakStmt : BREAK SEMICOLON                                             (Ast.BREAK)
continueStmt : CONTINUE SEMICOLON                                       (Ast.CONTINUE)


(* ================================= EXPRESSION ======================================= *)
expression : mutable EQUAL expression                               (Ast.assign (mutable , expression))
            | mutable PLUSEQUAL expression                          (Ast.assignPlus (mutable , expression))
            | mutable MINUSEQUAL expression                         (Ast.assignMinus (mutable , expression))
            | mutable MULTEQUAL expression                          (Ast.assignMult (mutable , expression))
            | mutable DIVEQUAL expression                           (Ast.assignDiv (mutable , expression))
            | mutable INC                                           (Ast.increment (mutable))
            | mutable DEC                                           (Ast.decrement (mutable))
            | simpleExpression                                      (Ast.plainExpression (simpleExpression))

simpleExpression : simpleExpression OR andExpression                (Ast.or(simpleExpression , andExpression))
                | andExpression                                     (Ast.noOr (andExpression) )

andExpression : andExpression AND unaryRelExpression                (Ast.simpleAnd (andExpression , unaryRelExpression)) 
                | unaryRelExpression                                (Ast.uExpr (unaryRelExpression))

unaryRelExpression : NOT unaryRelExpression                         (Ast.not (unaryRelExpression))
                | relExpression                                      (Ast.rExpr (relExpression))

relExpression : sumExpression LESSEQUAL sumExpression                       (Ast.relExp (sumExpression1 , Ast.LTE , sumExpression2 ))    
                | sumExpression LESS sumExpression                           (Ast.relExp (sumExpression1 , Ast.LT , sumExpression2 ))
                | sumExpression GREATER sumExpression                       (Ast.relExp (sumExpression1 , Ast.GTE , sumExpression2 ))
                | sumExpression GREATEREQUAL sumExpression                  (Ast.relExp (sumExpression1 , Ast.GT , sumExpression2 ))
                | sumExpression EQUALEQUAL sumExpression                    (Ast.relExp (sumExpression1 , Ast.EQ , sumExpression2 ))
                | sumExpression NOTEQUAL sumExpression                      (Ast.relExp (sumExpression1 , Ast.NEQ , sumExpression2 ))
                | sumExpression                                              (Ast.noRel (sumExpression))

sumExpression : sumExpression PLUS term                                    (Ast.sumExp (sumExpression , Ast.PLUS , term)) 
                | sumExpression MINUS term                                  (Ast.sumExp (sumExpression , Ast.MINUS , term))
                | term                                                      (Ast.noSum (term))

term            : term MULT unaryExpression                                (Ast.multExp (term , Ast.MULT , unaryExpression)) 
                | term DIV unaryExpression                                 (Ast.multExp (term , Ast.DIV , unaryExpression))
                | term MOD unaryExpression                                 (Ast.multExp (term , Ast.MOD , unaryExpression))
                | unaryExpression                                          (Ast.noMult (unaryExpression))

unaryExpression : DASH unaryExpression                                    (Ast.uExp (Ast.DASH , unaryExpression)) 
                | factor                                                   (Ast.noUnary (factor))

factor : immutable                                                         (Ast.immut (immutable))
        | mutable                                                          (Ast.mut (mutable))

mutable : ID                                          %prec c                     (Ast.mID (ID))
        | mutable LEFTBRACKET expression RIGHTBRACKET                      (Ast.mArray (mutable , expression ))
        (* | mutable DOT ID                                                    (Ast.mRecord (mutable,ID)) *)

immutable : LPARA expression RPARA                                          (Ast.paranthesis(expression)) 
        | call                                                              (Ast.c (call))
        | constant                                                          (Ast.const (constant))

call : ID LPARA args RPARA                                                  (Ast.callArgs (ID , args))

args :                                                                          ([])
        | argList                                                               (argList)

argList:  argList COMMA expression                                                (argList @ [expression])  
        |  expression                                                           ([expression]) 

constant : NUMCONST                                                             (Ast.number(NUMCONST))
        | CHARCONST                                                             (Ast.charConst (CHARCONST))
        | TRUE                                                                  (Ast.trueValue)
        | FALSE                                                                 (Ast.falseValue)