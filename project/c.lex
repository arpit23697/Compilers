val  lineRef = ref 0 
fun updateLine n      = lineRef := !(lineRef) + n

(* Stuff done to make use of the Tokens module generated by expr.grm *)

type pos = int
type svalue        = Tokens.svalue
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult     = (svalue,pos) token


fun lineRange l r = "line " ^ l
fun error (e,l,r) = TextIO.output(TextIO.stdErr, lineRange l r ^ ":" ^ e ^ "\n")

fun eof   ()      = Tokens.EOF (!lineRef,!lineRef)

%%
%header (functor TigerLexFun(structure Tokens : Tiger_TOKENS));


letter = [a-zA-Z];
digit = [0-9];
letdig = digit | letter;
ID = letter{letdig}*;
NUMCONST = {digit}+;
ws    = [\ \t];
CHARCONST = letter;

%%
\n                                  => ( updateLine 1; lex() );
{ws}+                               => ( lex() );
"{"                                 => (Tokens.LEFTBRACE (!lineRef , !lineRef));
"}"                                 => (Tokens.RIGHTBRACE (!lineRef , !lineRef));
","                                 => (Tokens.COMMA (!lineRef , !lineRef));
";"                                 => (Tokens.SEMICOLON (!lineRef , !lineRef));
":"                                 => (Tokens.COLON (!lineRef , !lineRef));
"["                                 => (Tokens.LEFTBRACKET (!lineRef , !lineRef));
"]"                                 => (Tokens.RIGHTBRACKET (!lineRef , !lineRef));
"("                                 => (Tokens.LPARA (!lineRef , !lineRef));
")"                                 => (Tokens.RPARA (!lineRef , !lineRef));
"record"                            =>  (Tokens.RECORD (!lineRef , !lineRef));
"static"                            => (Tokens.STATIC (!lineRef , !lineRef));
"int"                               => (Tokens.INT (!lineRef , !lineRef));
"bool"                              => (Tokens.BOOL (!lineRef , !lineRef));
"char"                              => (Tokens.CHAR (!lineRef , !lineRef));
"void"                              => (Tokens.VOID (!lineRef , !lineRef));
"if"                                => (Tokens.IF (!lineRef , !lineRef));
"else"                              => (Tokens.ELSE (!lineRef , !lineRef));
"while"                             => (Tokens.WHILE (!lineRef , !lineRef));
"for"                               => (Tokens.FOR (!lineRef , !lineRef));
"return"                            => (Tokens.RETURN (!lineRef , !lineRef));
"break"                             => (Tokens.BREAK (!lineRef , !lineRef));
"continue"                          => (Tokens.CONTINUE (!lineRef , !lineRef));
"="                                 => (Tokens.EQUAL (!lineRef , !lineRef));
"+="                                => (Tokens.PLUSEQUAL (!lineRef , !lineRef));
"-="                                => (Tokens.MIUNSEQUAL (!lineRef , !lineRef));
"*="                                => (Tokens.MULTEQUAL (!lineRef , !lineRef));
"/="                                => (Tokens.DIVEQUAL (!lineRef , !lineRef));
"++"                                => (Tokens.INC (!lineRef , !lineRef));
"--"                                => (Tokens.DEC (!lineRef , !lineRef));
"||"                                => (Tokens.OR (!lineRef , !lineRef));
"&&"                                => (Tokens.AND (!lineRef , !lineRef));   
"!"                                 => (Tokens.NOT (!lineRef , !lineRef));               
"<="                                => (Tokens.LESSEQUAL (!lineRef , !lineRef));
"<"                                 => (Tokens.LESS (!lineRef , !lineRef));
">"                                 => (Tokens.GREATER (!lineRef , !lineRef));
">="                                => (Tokens.GREATEREQUAL (!lineRef , !lineRef));
"=="                                => (Tokens.EQUALEQUAL (!lineRef , !lineRef));
"!="                                => (Tokens.NOTEQUAL (!lineRef , !lineRef));
"+"                                 => (Tokens.PLUS (!lineRef , !lineRef));
"-"                                 => (Tokens.MINUS (!lineRef , !lineRef));
"*"                                 =>  (Tokens.MULT (!lineRef , !lineRef));
"/"                                 => (Tokens.DIV (!lineRef , !lineRef));
"%"                                 => (Tokens.MOD (!lineRef , !lineRef));
"?"                                 => (Tokens.QUES (!lineRef , !lineRef));
"."                                 => (Tokens.DOT (!lineRef , !lineRef));
"true"                              => (Tokens.TRUE (!lineRef , !lineRef));
"false"                             => (Tokens.FALSE (!lineRef , !lineRef));
ID                                  => (Tokens.ID (yytext , !lineRef , !lineRef));
CHARCONST                           => (Tokens.CHARCONST (yytext, !lineRef , !lineRef));
NUMCONST                          => (Tokens.NUMCONST (yytext, !lineRef , !lineRef));